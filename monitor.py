"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞"
"""
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from config import DB_PATH, OMSK_TIMEZONE, setup_logging

setup_logging()
logger = logging.getLogger(__name__)


class BotMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db_path = DB_PATH
    
    def check_database_health(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='reminders'")
                table_exists = cursor.fetchone() is not None
                
                if not table_exists:
                    return {"status": "error", "message": "–¢–∞–±–ª–∏—Ü–∞ reminders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
                
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                cursor.execute("SELECT COUNT(*) FROM reminders WHERE is_sent = FALSE")
                active_reminders = cursor.fetchone()[0]
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                cursor.execute("SELECT COUNT(*) FROM reminders")
                total_reminders = cursor.fetchone()[0]
                
                # –°—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                yesterday = datetime.now(OMSK_TIMEZONE) - timedelta(days=1)
                cursor.execute("""
                    SELECT COUNT(*) FROM reminders 
                    WHERE is_sent = TRUE AND created_at > ?
                """, (yesterday.isoformat(),))
                recent_sent = cursor.fetchone()[0]
                
                return {
                    "status": "healthy",
                    "active_reminders": active_reminders,
                    "total_reminders": total_reminders,
                    "sent_last_24h": recent_sent,
                    "db_size_mb": self._get_db_size()
                }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def _get_db_size(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ú–ë"""
        try:
            import os
            size_bytes = os.path.getsize(self.db_path)
            return round(size_bytes / (1024 * 1024), 2)
        except:
            return 0.0
    
    def get_upcoming_reminders(self, hours: int = 24) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            current_time = datetime.now(OMSK_TIMEZONE)
            future_time = current_time + timedelta(hours=hours)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT user_id, reminder_time, created_at
                    FROM reminders
                    WHERE is_sent = FALSE 
                    AND reminder_time BETWEEN ? AND ?
                    ORDER BY reminder_time
                """, (current_time.isoformat(), future_time.isoformat()))
                
                reminders = []
                for row in cursor.fetchall():
                    user_id, reminder_time_str, created_at = row
                    reminder_time = datetime.fromisoformat(reminder_time_str)
                    reminders.append({
                        "user_id": user_id,
                        "reminder_time": reminder_time.strftime("%d.%m.%Y %H:%M"),
                        "created_at": created_at,
                        "time_until": str(reminder_time - current_time).split('.')[0]
                    })
                
                return reminders
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞"""
        current_time = datetime.now(OMSK_TIMEZONE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ë–î
        db_health = self.check_database_health()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        upcoming = self.get_upcoming_reminders()
        
        report = f"""
üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–û–¢–ê "–ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ê"
–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {current_time.strftime("%d.%m.%Y %H:%M:%S")} (–û–º—Å–∫)

üóÑÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:
–°—Ç–∞—Ç—É—Å: {db_health.get('status', 'unknown')}
"""
        
        if db_health['status'] == 'healthy':
            report += f"""–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {db_health['active_reminders']}
–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {db_health['total_reminders']}
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 24—á: {db_health['sent_last_24h']}
–†–∞–∑–º–µ—Ä –ë–î: {db_health['db_size_mb']} –ú–ë
"""
        else:
            report += f"–û—à–∏–±–∫–∞: {db_health.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
        
        report += f"\n‚è∞ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (24—á):\n"
        
        if upcoming:
            for reminder in upcoming[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                report += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reminder['user_id']}: {reminder['reminder_time']} (—á–µ—Ä–µ–∑ {reminder['time_until']})\n"
            
            if len(upcoming) > 10:
                report += f"... –∏ –µ—â–µ {len(upcoming) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        else:
            report += "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        
        return report
    
    def cleanup_old_data(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cutoff_date = datetime.now(OMSK_TIMEZONE) - timedelta(days=days)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    DELETE FROM reminders 
                    WHERE is_sent = TRUE AND created_at < ?
                """, (cutoff_date.isoformat(),))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
                return deleted_count
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = BotMonitor()
    
    print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = monitor.generate_report()
    print(report)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    deleted = monitor.cleanup_old_data()
    if deleted > 0:
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
