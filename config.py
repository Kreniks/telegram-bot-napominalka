"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞" v2.0
"""
import os
import logging
from datetime import timezone, timedelta
from pathlib import Path

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª.")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –û–º—Å–∫–∞ (+6 UTC)
OMSK_TIMEZONE = timezone(timedelta(hours=6))

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
PROJECT_ROOT = Path(__file__).parent
DB_PATH = os.getenv('DB_PATH', PROJECT_ROOT / 'reminders.db')
LOG_FILE = os.getenv('LOG_FILE', PROJECT_ROOT / 'bot.log')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
LOG_MAX_SIZE_MB = int(os.getenv('LOG_MAX_SIZE_MB', '50'))
LOG_BACKUP_COUNT = int(os.getenv('LOG_BACKUP_COUNT', '10'))
LOG_TO_STDOUT = os.getenv('LOG_TO_STDOUT', 'false').lower() == 'true'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CHECK_INTERVAL_SECONDS = int(os.getenv('CHECK_INTERVAL_SECONDS', '60'))
NOTIFICATION_RETRY_ATTEMPTS = int(os.getenv('NOTIFICATION_RETRY_ATTEMPTS', '3'))
NOTIFICATION_RETRY_DELAY_SECONDS = int(os.getenv('NOTIFICATION_RETRY_DELAY_SECONDS', '5'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
HEALTH_CHECK_ENABLED = os.getenv('HEALTH_CHECK_ENABLED', 'true').lower() == 'true'
HEALTH_CHECK_PORT = int(os.getenv('HEALTH_CHECK_PORT', '8080'))

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
MESSAGES = {
    'start': (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ v2.0!\n\n"
        "‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç\n\n"
        "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ <code>18:00</code> - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>18:00 12.06</code> - –±–µ–∑ –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.25</code> - –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥\n"
        "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
        "üåç –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)"
    ),
    'help': (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–µ v2.0</b>\n\n"
        "üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ <code>18:00</code> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>18:00 12.06</code> - 12 –∏—é–Ω—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.25</code> - 12 –∏—é–Ω—è 2025 –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–¥–∞\n"
        "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)\n\n"
        "üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    ),
    'invalid_format': (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ <code>18:00</code> - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>18:00 12.06</code> - –±–µ–∑ –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.25</code> - –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥\n"
        "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    ),
    'past_time': "‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.",
    'reminder_set': "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {date} –≤ {time}!",
    'reminder_sent': "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\nüìÖ {date} –≤ {time}",
    'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
}


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path(LOG_FILE).parent
    log_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, LOG_LEVEL))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.handlers.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    if LOG_FILE:
        from logging.handlers import RotatingFileHandler
        file_handler = RotatingFileHandler(
            LOG_FILE,
            maxBytes=LOG_MAX_SIZE_MB * 1024 * 1024,
            backupCount=LOG_BACKUP_COUNT,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    if LOG_TO_STDOUT:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è aiogram
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
setup_logging()
