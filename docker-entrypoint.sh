#!/bin/bash
set -e

# Docker entrypoint —Å–∫—Ä–∏–ø—Ç –¥–ª—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞"
# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫ –≤ production

echo "üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞' –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
echo "============================================================"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -z "$BOT_TOKEN" ]; then
        log "‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        log "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN"
        exit 1
    fi
    
    log "‚úÖ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    if [[ ! $BOT_TOKEN =~ ^[0-9]+:[A-Za-z0-9_-]+$ ]]; then
        log "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç BOT_TOKEN –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p /app/data /app/logs /app/backups
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [ ! -w /app/data ]; then
        log "‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ /app/data"
        exit 1
    fi
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if [ ! -f "$DB_PATH" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $DB_PATH"
        python -c "
from database import db
print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
"
        if [ $? -eq 0 ]; then
            log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        else
            log "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            exit 1
        fi
    else
        log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $DB_PATH"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
test_bot_connection() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API..."
    
    python -c "
import asyncio
from aiogram import Bot
from config import BOT_TOKEN

async def test_connection():
    bot = Bot(token=BOT_TOKEN)
    try:
        me = await bot.get_me()
        print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: @{me.username} ({me.first_name})')
        return True
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')
        return False
    finally:
        await bot.session.close()

result = asyncio.run(test_connection())
exit(0 if result else 1)
" 2>/dev/null

    if [ $? -eq 0 ]; then
        log "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ"
    else
        log "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API"
        log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
run_tests() {
    if [ "$RUN_TESTS" = "true" ]; then
        log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
        python test_bot.py
        if [ $? -eq 0 ]; then
            log "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        else
            log "‚ùå –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
            exit 1
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_backup() {
    if [ "$CREATE_BACKUP" = "true" ] && [ -f "$DB_PATH" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        backup_file="/app/backups/reminders_$(date +%Y%m%d_%H%M%S).db"
        cp "$DB_PATH" "$backup_file"
        log "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $backup_file"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ stdout
    if [ "$LOG_TO_STDOUT" = "true" ]; then
        ln -sf /dev/stdout /app/logs/bot.log
        log "‚úÖ –õ–æ–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ stdout"
    fi
}

# –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
start_health_check() {
    if [ "$HEALTH_CHECK_ENABLED" = "true" ]; then
        log "–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $HEALTH_CHECK_PORT..."
        python -c "
import asyncio
from aiohttp import web
import json
from datetime import datetime

async def health_check(request):
    return web.json_response({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'telegram-reminder-bot'
    })

async def init_app():
    app = web.Application()
    app.router.add_get('/health', health_check)
    return app

if __name__ == '__main__':
    web.run_app(init_app(), host='0.0.0.0', port=${HEALTH_CHECK_PORT})
" &
        log "‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
determine_run_mode() {
    case "${RUN_MODE:-normal}" in
        "advanced")
            BOT_SCRIPT="bot_advanced.py"
            log "üîß –†–µ–∂–∏–º: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞"
            ;;
        "monitor")
            BOT_SCRIPT="monitor.py"
            log "üìä –†–µ–∂–∏–º: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            ;;
        "test")
            BOT_SCRIPT="test_bot.py"
            log "üß™ –†–µ–∂–∏–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ;;
        *)
            BOT_SCRIPT="main.py"
            log "ü§ñ –†–µ–∂–∏–º: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞"
            ;;
    esac
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏..."
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    check_env
    setup_directories
    setup_logging
    init_database
    test_bot_connection
    run_tests
    create_backup
    start_health_check
    determine_run_mode
    
    log "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    log "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: $BOT_SCRIPT"
    log "============================================================"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    exec python "$BOT_SCRIPT"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
cleanup() {
    log "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è graceful shutdown
    exit 0
}

trap cleanup SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫
main "$@"
