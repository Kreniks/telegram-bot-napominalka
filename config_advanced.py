"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞"
–í–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
"""
import os
import logging
from dotenv import load_dotenv
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.getenv('DB_PATH', 'reminders.db')
DB_BACKUP_ENABLED = os.getenv('DB_BACKUP_ENABLED', 'true').lower() == 'true'
DB_BACKUP_INTERVAL_HOURS = int(os.getenv('DB_BACKUP_INTERVAL_HOURS', '24'))
DB_CLEANUP_DAYS = int(os.getenv('DB_CLEANUP_DAYS', '30'))

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
OMSK_TIMEZONE = pytz.timezone('Asia/Omsk')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOG_FILE = os.getenv('LOG_FILE', 'bot.log')
LOG_MAX_SIZE_MB = int(os.getenv('LOG_MAX_SIZE_MB', '10'))
LOG_BACKUP_COUNT = int(os.getenv('LOG_BACKUP_COUNT', '5'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CHECK_INTERVAL_SECONDS = int(os.getenv('CHECK_INTERVAL_SECONDS', '60'))
MAX_CONCURRENT_REMINDERS = int(os.getenv('MAX_CONCURRENT_REMINDERS', '100'))
RATE_LIMIT_MESSAGES_PER_MINUTE = int(os.getenv('RATE_LIMIT_MESSAGES_PER_MINUTE', '30'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ALLOWED_USERS = os.getenv('ALLOWED_USERS', '').split(',') if os.getenv('ALLOWED_USERS') else []
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0')) if os.getenv('ADMIN_USER_ID') else None
ENABLE_ANALYTICS = os.getenv('ENABLE_ANALYTICS', 'false').lower() == 'true'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_RETRY_ATTEMPTS = int(os.getenv('NOTIFICATION_RETRY_ATTEMPTS', '3'))
NOTIFICATION_RETRY_DELAY_SECONDS = int(os.getenv('NOTIFICATION_RETRY_DELAY_SECONDS', '5'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
HEALTH_CHECK_ENABLED = os.getenv('HEALTH_CHECK_ENABLED', 'true').lower() == 'true'
HEALTH_CHECK_PORT = int(os.getenv('HEALTH_CHECK_PORT', '8080'))
METRICS_ENABLED = os.getenv('METRICS_ENABLED', 'false').lower() == 'true'

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MESSAGES = {
    'start': (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: '18:00 12.06.2025'\n\n"
        "‚è∞ –ï—Å–ª–∏ –¥–∞—Ç—É –Ω–µ —É–∫–∞–∑–∞—Ç—å, —è –Ω–∞–ø–æ–º–Ω—é —Å–µ–≥–æ–¥–Ω—è.\n"
        "üåç –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)!\n\n"
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    ),
    'help': (
        "üìñ –°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£-–ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ï\n\n"
        "üîπ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
        "‚Ä¢ '18:00' - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ '18:00 12.06.2025' - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n\n"
        "üîπ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "‚Ä¢ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)\n"
        "‚Ä¢ –•—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üîπ –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    ),
    'invalid_format': (
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ '18:00' (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)\n"
        "‚Ä¢ '18:00 12.06.2025' (–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É)"
    ),
    'past_time': (
        "‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n\n"
        "–£–∫–∞–∂–∏ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É."
    ),
    'unknown_message': (
        "ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ '18:00 12.06.2025'\n"
        "‚Ä¢ '09:30'\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏!"
    ),
    'reminder_set_with_date': "‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {date} –≤ {time} (–ø–æ –æ–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)!",
    'reminder_set_today': "‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —Å–µ–≥–æ–¥–Ω—è –≤ {time} (–ø–æ –æ–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)!",
    'reminder_text': "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\nüìÖ {date} –≤ {time}",
    'no_reminder': "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
    'current_reminder': "üìã –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\nüìÖ {date} –≤ {time} (–ø–æ –æ–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)",
    'error_occurred': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    'access_denied': "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.",
    'rate_limit': "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
TEST_MODE = os.getenv('TEST_MODE', 'false').lower() == 'true'

def setup_advanced_logging():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
    from logging.handlers import RotatingFileHandler
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, LOG_LEVEL.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.handlers.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        LOG_FILE,
        maxBytes=LOG_MAX_SIZE_MB * 1024 * 1024,
        backupCount=LOG_BACKUP_COUNT,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiohttp.access').setLevel(logging.WARNING)
    logging.getLogger('aiogram.event').setLevel(logging.WARNING)
    
    if not DEBUG_MODE:
        logging.getLogger('aiogram').setLevel(logging.WARNING)

def get_config_summary():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        'bot_token_set': bool(BOT_TOKEN),
        'db_path': DB_PATH,
        'log_level': LOG_LEVEL,
        'check_interval': CHECK_INTERVAL_SECONDS,
        'timezone': str(OMSK_TIMEZONE),
        'debug_mode': DEBUG_MODE,
        'test_mode': TEST_MODE,
        'backup_enabled': DB_BACKUP_ENABLED,
        'health_check_enabled': HEALTH_CHECK_ENABLED,
        'allowed_users_count': len(ALLOWED_USERS) if ALLOWED_USERS else 0,
        'admin_configured': bool(ADMIN_USER_ID)
    }
