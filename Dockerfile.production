# Production-ready Dockerfile для Telegram-бота "Напоминалка"
# Оптимизирован для безопасности, производительности и мониторинга

# Многоэтапная сборка для минимального размера образа
FROM python:3.11-slim as builder

# Аргументы сборки
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Метаданные образа
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="telegram-reminder-bot" \
      org.label-schema.description="Production Telegram Reminder Bot with Omsk timezone" \
      org.label-schema.url="https://github.com/Kreniks/telegram-bot-napominalka" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/Kreniks/telegram-bot-napominalka" \
      org.label-schema.vendor="telegram-bot-napominalka" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Устанавливаем системные зависимости для сборки
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libc6-dev \
    && rm -rf /var/lib/apt/lists/*

# Создаем виртуальное окружение
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Обновляем pip и устанавливаем зависимости
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir gunicorn supervisor

# Финальный production образ
FROM python:3.11-slim

# Аргументы для финального образа
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Метаданные
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="telegram-reminder-bot" \
      org.label-schema.description="Production Telegram Reminder Bot" \
      org.label-schema.version=$VERSION

# Устанавливаем системные зависимости
RUN apt-get update && apt-get install -y --no-install-recommends \
    tzdata \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Устанавливаем часовой пояс Омска
ENV TZ=Asia/Omsk
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Копируем виртуальное окружение
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Создаем группу и пользователя
RUN groupadd -r -g 1000 botuser && \
    useradd -r -g botuser -u 1000 -d /app -s /bin/bash botuser

# Создаем структуру директорий
RUN mkdir -p /app/{data,logs,backups,config} && \
    chown -R botuser:botuser /app

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем конфигурационные файлы
COPY --chown=botuser:botuser supervisord.conf /etc/supervisor/conf.d/
COPY --chown=botuser:botuser docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Копируем исходный код
COPY --chown=botuser:botuser *.py ./
COPY --chown=botuser:botuser requirements.txt ./

# Переключаемся на непривилегированного пользователя
USER botuser

# Переменные окружения для production
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DB_PATH=/app/data/reminders.db \
    LOG_FILE=/app/logs/bot.log \
    LOG_LEVEL=INFO \
    LOG_MAX_SIZE_MB=50 \
    LOG_BACKUP_COUNT=10 \
    CHECK_INTERVAL_SECONDS=60 \
    NOTIFICATION_RETRY_ATTEMPTS=3 \
    HEALTH_CHECK_ENABLED=true \
    HEALTH_CHECK_PORT=8080

# Создаем volume точки
VOLUME ["/app/data", "/app/logs", "/app/backups"]

# Открываем порт для health check
EXPOSE 8080

# Проверка здоровья контейнера
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || python -c "import sqlite3; sqlite3.connect('${DB_PATH}').execute('SELECT 1').fetchone()" || exit 1

# Используем dumb-init для правильной обработки сигналов
ENTRYPOINT ["dumb-init", "--"]

# Команда запуска через entrypoint скрипт
CMD ["/usr/local/bin/docker-entrypoint.sh"]
