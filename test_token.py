"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ Telegram-–±–æ—Ç–∞
"""
import os
import re
from pathlib import Path

def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_vars = {}
    env_file = Path('.env')
    
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return env_vars
    
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
        print("‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
    
    return env_vars

def validate_token_format(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"""
    if not token:
        return False, "–¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π"
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞
    pattern = r'^\d{8,10}:[A-Za-z0-9_-]{35}$'
    if not re.match(pattern, token):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"
    
    return True, "–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"

def test_token_with_aiogram(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é aiogram"""
    try:
        from aiogram.utils.token import validate_token
        validate_token(token)
        return True, "–¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é aiogram"
    except ImportError:
        return None, "aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ aiogram: {e}"

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram-–±–æ—Ç–∞")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    env_vars = load_env_file()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = env_vars.get('BOT_TOKEN', '').strip()
    
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram")
        return
    
    print(f"üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: {token[:10]}...{token[-10:] if len(token) > 20 else token}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –∑–∞–≥–ª—É—à–∫–æ–π
    placeholder_tokens = [
        'YOUR_BOT_TOKEN_HERE',
        'your_bot_token_here',
        '1234567890:ABCdefGHIjklMNOpqrsTUVwxyz'
    ]
    
    if token in placeholder_tokens:
        print("‚ùå –≠—Ç–æ —Ç–æ–∫–µ–Ω-–∑–∞–≥–ª—É—à–∫–∞!")
        print("üìã –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather:")
        print("   1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram")
        print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot")
        print("   3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    is_valid_format, format_message = validate_token_format(token)
    print(f"üìù –§–æ—Ä–º–∞—Ç: {'‚úÖ' if is_valid_format else '‚ùå'} {format_message}")
    
    if not is_valid_format:
        print("\nüí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞:")
        print("   1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        print("   - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8-10 —Ü–∏—Ñ—Ä")
        print("   - –ó–∞—Ç–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ :")
        print("   - –ó–∞—Ç–µ–º 35 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, -)")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å aiogram
    aiogram_result, aiogram_message = test_token_with_aiogram(token)
    if aiogram_result is not None:
        print(f"ü§ñ Aiogram: {'‚úÖ' if aiogram_result else '‚ùå'} {aiogram_message}")
        
        if aiogram_result:
            print("\nüéâ –¢–û–ö–ï–ù –ö–û–†–†–ï–ö–¢–ù–´–ô!")
            print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞")
        else:
            print("\n‚ùå –¢–û–ö–ï–ù –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô!")
            print("üìã –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    else:
        print(f"‚ö†Ô∏è Aiogram: {aiogram_message}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ aiogram –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: pip install aiogram")
    
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   Docker: docker-run.bat")
    print("   –û–±—ã—á–Ω–æ: run.bat")

if __name__ == "__main__":
    main()
