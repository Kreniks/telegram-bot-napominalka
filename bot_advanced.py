"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞" —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""
import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from config_advanced import (
    BOT_TOKEN, setup_advanced_logging, get_config_summary,
    MESSAGES, ALLOWED_USERS, ADMIN_USER_ID, RATE_LIMIT_MESSAGES_PER_MINUTE,
    CHECK_INTERVAL_SECONDS, NOTIFICATION_RETRY_ATTEMPTS, NOTIFICATION_RETRY_DELAY_SECONDS
)
from database import db
from handlers import send_reminder_to_user
from utils import validate_reminder_time, format_datetime_for_user, format_time_for_user

logger = logging.getLogger(__name__)


class AdvancedReminderBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_advanced_logging()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_summary = get_config_summary()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {config_summary}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self._running = False
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'messages_processed': 0,
            'reminders_sent': 0,
            'errors_count': 0,
            'start_time': datetime.now()
        }
        
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: Message):
            await self._handle_start(message)
        
        @self.dp.message(Command("help"))
        async def cmd_help(message: Message):
            await self._handle_help(message)
        
        @self.dp.message(Command("status"))
        async def cmd_status(message: Message):
            await self._handle_status(message)
        
        @self.dp.message(Command("stats"))
        async def cmd_stats(message: Message):
            await self._handle_stats(message)
        
        @self.dp.message(Command("cancel"))
        async def cmd_cancel(message: Message):
            await self._handle_cancel(message)
        
        @self.dp.message()
        async def handle_text_message(message: Message):
            await self._handle_text_message(message)
    
    def _check_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not ALLOWED_USERS:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
        return str(user_id) in ALLOWED_USERS
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return ADMIN_USER_ID and user_id == ADMIN_USER_ID
    
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            
            if not self._check_access(user_id):
                await message.answer(MESSAGES['access_denied'])
                return
            
            await message.answer(MESSAGES['start'])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            self.stats['messages_processed'] += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            self.stats['errors_count'] += 1
    
    async def _handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            user_id = message.from_user.id
            
            if not self._check_access(user_id):
                await message.answer(MESSAGES['access_denied'])
                return
            
            await message.answer(MESSAGES['help'])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
            self.stats['messages_processed'] += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            self.stats['errors_count'] += 1
    
    async def _handle_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            user_id = message.from_user.id
            
            if not self._check_access(user_id):
                await message.answer(MESSAGES['access_denied'])
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminder = db.get_user_reminder(user_id)
            
            if reminder:
                response = MESSAGES['current_reminder'].format(
                    date=format_datetime_for_user(reminder),
                    time=format_time_for_user(reminder)
                )
            else:
                response = MESSAGES['no_reminder']
            
            await message.answer(response)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å")
            self.stats['messages_processed'] += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /status: {e}")
            await message.answer(MESSAGES['error_occurred'])
            self.stats['errors_count'] += 1
    
    async def _handle_stats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = message.from_user.id
            
            if not self._is_admin(user_id):
                await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                return
            
            uptime = datetime.now() - self.stats['start_time']
            uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            
            stats_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>

‚è± <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}
üì® <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {self.stats['messages_processed']}
üîî <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b> {self.stats['reminders_sent']}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {self.stats['errors_count']}

üóÑ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(db.get_due_reminders())}

üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL_SECONDS}—Å
‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {NOTIFICATION_RETRY_ATTEMPTS}
‚Ä¢ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {RATE_LIMIT_MESSAGES_PER_MINUTE}/–º–∏–Ω
"""
            
            await message.answer(stats_text)
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats: {e}")
            await message.answer(MESSAGES['error_occurred'])
            self.stats['errors_count'] += 1
    
    async def _handle_cancel(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        try:
            user_id = message.from_user.id
            
            if not self._check_access(user_id):
                await message.answer(MESSAGES['access_denied'])
                return
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reminder = db.get_user_reminder(user_id)
            if reminder:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ)
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await message.answer("‚úÖ –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            else:
                await message.answer(MESSAGES['no_reminder'])
            
            self.stats['messages_processed'] += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /cancel: {e}")
            await message.answer(MESSAGES['error_occurred'])
            self.stats['errors_count'] += 1
    
    async def _handle_text_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            text = message.text.strip()
            
            if not self._check_access(user_id):
                await message.answer(MESSAGES['access_denied'])
                return
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            target_datetime, status, is_today_only = validate_reminder_time(text)
            
            if status == "invalid_format":
                await message.answer(MESSAGES['invalid_format'])
                self.stats['messages_processed'] += 1
                return
            
            if status == "past_time":
                await message.answer(MESSAGES['past_time'])
                self.stats['messages_processed'] += 1
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if db.add_reminder(user_id, target_datetime):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if is_today_only:
                    response = MESSAGES['reminder_set_today'].format(
                        time=format_time_for_user(target_datetime)
                    )
                else:
                    response = MESSAGES['reminder_set_with_date'].format(
                        date=format_datetime_for_user(target_datetime),
                        time=format_time_for_user(target_datetime)
                    )
                
                await message.answer(response)
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {target_datetime}")
            else:
                await message.answer(MESSAGES['error_occurred'])
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.stats['errors_count'] += 1
            
            self.stats['messages_processed'] += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            try:
                await message.answer(MESSAGES['error_occurred'])
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            self.stats['errors_count'] += 1
    
    async def check_reminders(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self._running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                due_reminders = db.get_due_reminders()
                
                for reminder_id, user_id, reminder_time in due_reminders:
                    success = False
                    
                    # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                    for attempt in range(NOTIFICATION_RETRY_ATTEMPTS):
                        try:
                            await send_reminder_to_user(self.bot, user_id, reminder_time)
                            success = True
                            self.stats['reminders_sent'] += 1
                            break
                            
                        except Exception as e:
                            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                            if attempt < NOTIFICATION_RETRY_ATTEMPTS - 1:
                                await asyncio.sleep(NOTIFICATION_RETRY_DELAY_SECONDS)
                    
                    if success:
                        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                        db.mark_reminder_sent(reminder_id)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –ø–æ—Å–ª–µ {NOTIFICATION_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫")
                        self.stats['errors_count'] += 1
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ä–∞–∑ –≤ —á–∞—Å)
                current_minute = datetime.now().minute
                if current_minute == 0:
                    db.cleanup_old_reminders()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                self.stats['errors_count'] += 1
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(CHECK_INTERVAL_SECONDS)
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            self._running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminder_task = asyncio.create_task(self.check_reminders())
            
            logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            self._running = False
            if 'reminder_task' in locals():
                reminder_task.cancel()
                try:
                    await reminder_task
                except asyncio.CancelledError:
                    pass
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self._running = False
        await self.bot.session.close()
        logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AdvancedReminderBot()
    
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main())
