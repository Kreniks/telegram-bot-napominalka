[supervisord]
nodaemon=true
user=botuser
logfile=/app/logs/supervisord.log
pidfile=/app/data/supervisord.pid
childlogdir=/app/logs

[unix_http_server]
file=/app/data/supervisor.sock
chmod=0700
chown=botuser:botuser

[supervisorctl]
serverurl=unix:///app/data/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:telegram-bot]
command=python %(ENV_BOT_SCRIPT)s
directory=/app
user=botuser
autostart=true
autorestart=true
startretries=3
redirect_stderr=true
stdout_logfile=/app/logs/bot_stdout.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
environment=PYTHONPATH="/app",PYTHONUNBUFFERED="1"

[program:health-check]
command=python -c "
import asyncio
from aiohttp import web
import json
from datetime import datetime
import os

async def health_check(request):
    return web.json_response({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'telegram-reminder-bot',
        'version': '1.0.0'
    })

async def metrics(request):
    # Простые метрики
    try:
        import sqlite3
        db_path = os.getenv('DB_PATH', '/app/data/reminders.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM reminders WHERE is_sent = 0')
        active_reminders = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM reminders')
        total_reminders = cursor.fetchone()[0]
        
        conn.close()
        
        return web.json_response({
            'active_reminders': active_reminders,
            'total_reminders': total_reminders,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return web.json_response({'error': str(e)}, status=500)

async def init_app():
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/metrics', metrics)
    return app

if __name__ == '__main__':
    port = int(os.getenv('HEALTH_CHECK_PORT', 8080))
    web.run_app(init_app(), host='0.0.0.0', port=port)
"
directory=/app
user=botuser
autostart=%(ENV_HEALTH_CHECK_ENABLED)s
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/health_check.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
