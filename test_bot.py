"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
"""
import asyncio
import logging
from datetime import datetime, timedelta

from config import OMSK_TIMEZONE, MESSAGES, setup_logging
from database import db
from utils import validate_reminder_time, format_datetime_for_user, format_time_for_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
setup_logging()
logger = logging.getLogger(__name__)


def test_time_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ ===")
    
    # –¢–µ—Å—Ç 1: –í—Ä–µ–º—è —Å –¥–∞—Ç–æ–π
    future_date = (datetime.now(OMSK_TIMEZONE) + timedelta(days=1)).strftime('%d.%m.%Y')
    test_input = f'18:00 {future_date}'
    result, status, is_today = validate_reminder_time(test_input)
    print(f"‚úÖ –í—Ä–µ–º—è —Å –¥–∞—Ç–æ–π: {test_input} -> {status}")
    
    # –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    future_time = (datetime.now(OMSK_TIMEZONE) + timedelta(hours=2)).strftime('%H:%M')
    result, status, is_today = validate_reminder_time(future_time)
    print(f"‚úÖ –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è: {future_time} -> {status}")
    
    # –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    result, status, is_today = validate_reminder_time('25:00')
    print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 25:00 -> {status}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    past_time = (datetime.now(OMSK_TIMEZONE) - timedelta(hours=1)).strftime('%H:%M')
    result, status, is_today = validate_reminder_time(past_time)
    print(f"‚úÖ –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: {past_time} -> {status}")
    
    print()


def test_database():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    
    test_user_id = 987654321
    test_time = datetime.now(OMSK_TIMEZONE) + timedelta(minutes=10)
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    success = db.add_reminder(test_user_id, test_time)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
    user_reminder = db.get_user_reminder(test_user_id)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–Ω–∞–π–¥–µ–Ω–æ' if user_reminder else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
    
    # –¢–µ—Å—Ç –∑–∞–º–µ–Ω—ã (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    new_time = datetime.now(OMSK_TIMEZONE) + timedelta(minutes=20)
    success = db.add_reminder(test_user_id, new_time)
    user_reminder_new = db.get_user_reminder(test_user_id)
    print(f"‚úÖ –ó–∞–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'—É—Å–ø–µ—à–Ω–æ' if user_reminder_new != user_reminder else '–æ—à–∏–±–∫–∞'}")
    
    print()


def test_message_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ===")
    
    test_time = datetime.now(OMSK_TIMEZONE) + timedelta(days=1, hours=3)
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    formatted_date = format_datetime_for_user(test_time)
    formatted_time = format_time_for_user(test_time)
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã: {formatted_date}")
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {formatted_time}")
    
    # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    reminder_msg = MESSAGES['reminder_set_with_date'].format(
        date=formatted_date,
        time=formatted_time
    )
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {reminder_msg}")
    
    print()


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    invalid_inputs = [
        "24:00",  # –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        "12:60",  # –ù–µ–≤–µ—Ä–Ω—ã–µ –º–∏–Ω—É—Ç—ã
        "18:00 32.12.2025",  # –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞
        "18:00 12.13.2025",  # –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü
        "abc",  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "18:00 12.06.2020",  # –ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞
    ]
    
    for invalid_input in invalid_inputs:
        result, status, is_today = validate_reminder_time(invalid_input)
        expected_status = "invalid_format" if status != "past_time" else "past_time"
        print(f"‚úÖ '{invalid_input}' -> {status}")
    
    print()


def test_timezone():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ===")
    
    current_omsk = datetime.now(OMSK_TIMEZONE)
    print(f"‚úÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –û–º—Å–∫–µ: {current_omsk}")
    print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_omsk.tzinfo}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞–ª–∏–∑—É–µ—Ç—Å—è
    test_input = "12:00"
    result, status, is_today = validate_reminder_time(test_input)
    if result:
        print(f"‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {result.tzinfo}")
    
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞'")
    print("=" * 60)
    
    try:
        test_time_parsing()
        test_database()
        test_message_formatting()
        test_edge_cases()
        test_timezone()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")


if __name__ == "__main__":
    asyncio.run(main())
