"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ 2.0
"""
import asyncio
import logging
from datetime import datetime, timedelta

from config import OMSK_TIMEZONE, setup_logging
from database import db_v2
from utils import (
    validate_reminder_time_v2,
    format_datetime_for_user,
    format_time_for_user,
    format_datetime_short,
    get_time_until_reminder
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
setup_logging()
logger = logging.getLogger(__name__)


def test_new_date_formats():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç ===")
    
    test_cases = [
        # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "18:00 12.06.2025",
        # –ö–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥
        "18:00 12.06.25",
        # –ë–µ–∑ –≥–æ–¥–∞
        "18:00 12.06",
        # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        "18:00",
        # –ù–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        "25:00",
        "18:00 32.13.2025",
        "abc",
        ""
    ]
    
    for test_input in test_cases:
        result, status, is_today = validate_reminder_time_v2(test_input)
        print(f"'{test_input}' -> {status} (today: {is_today})")
        if result:
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    print()


def test_database_v2():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö v2 ===")
    
    test_user_id = 123456789
    current_time = datetime.now(OMSK_TIMEZONE)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    test_reminders = [
        (current_time + timedelta(minutes=5), "–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        (current_time + timedelta(hours=1), "–í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        (current_time + timedelta(days=1), "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        (current_time + timedelta(weeks=1), None)  # –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞
    ]
    
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(test_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    for reminder_time, reminder_text in test_reminders:
        success = db_v2.add_reminder(test_user_id, reminder_time, reminder_text)
        print(f"  {reminder_time} - {'‚úÖ' if success else '‚ùå'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_reminders = db_v2.get_user_reminders(test_user_id)
    print(f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}: {len(user_reminders)} —à—Ç.")
    
    for reminder_id, reminder_time, reminder_text in user_reminders:
        print(f"  ID {reminder_id}: {format_datetime_short(reminder_time)}")
        if reminder_text:
            print(f"    –¢–µ–∫—Å—Ç: {reminder_text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    if user_reminders:
        first_reminder_id = user_reminders[0][0]
        print(f"\n–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ID {first_reminder_id}...")
        success = db_v2.delete_reminder(first_reminder_id, test_user_id)
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ' if success else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        count_after = db_v2.get_reminders_count(test_user_id)
        print(f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {count_after}")
    
    print()


def test_formatting_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    test_time = datetime.now(OMSK_TIMEZONE) + timedelta(days=1, hours=3, minutes=30)
    
    print(f"–¢–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è: {test_time}")
    print(f"format_datetime_for_user: {format_datetime_for_user(test_time)}")
    print(f"format_time_for_user: {format_time_for_user(test_time)}")
    print(f"format_datetime_short: {format_datetime_short(test_time)}")
    print(f"get_time_until_reminder: {get_time_until_reminder(test_time)}")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ—à–µ–¥—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    past_time = datetime.now(OMSK_TIMEZONE) - timedelta(hours=1)
    print(f"\n–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: {get_time_until_reminder(past_time)}")
    
    # –¢–µ—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —ç—Ç–æ–º –≥–æ–¥—É
    this_year_time = datetime.now(OMSK_TIMEZONE).replace(month=12, day=31, hour=23, minute=59)
    print(f"–í—Ä–µ–º—è –≤ —ç—Ç–æ–º –≥–æ–¥—É: {format_datetime_short(this_year_time)}")
    
    print()


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===")
    
    edge_cases = [
        # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        "18:00 29.02.24",
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞
        "18:00 29.02.25",
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        "00:00 01.01.25",
        "23:59 31.12.25",
        # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        "18:00 01.01.20",
        # –î–∞–ª–µ–∫–æ–µ –±—É–¥—É—â–µ–µ
        "18:00 01.01.99",
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        "18:00 31.04.25",  # –ê–ø—Ä–µ–ª—å –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ 30 –¥–Ω–µ–π
        "18:00 31.12.25",  # –î–µ–∫–∞–±—Ä—å –∏–º–µ–µ—Ç 31 –¥–µ–Ω—å
    ]
    
    for test_input in edge_cases:
        result, status, is_today = validate_reminder_time_v2(test_input)
        print(f"'{test_input}' -> {status}")
        if result:
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {format_datetime_short(result)}")
    
    print()


def test_year_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–¥–∞"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–¥–∞ ===")
    
    current_year = datetime.now(OMSK_TIMEZONE).year
    print(f"–¢–µ–∫—É—â–∏–π –≥–æ–¥: {current_year}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–æ–¥—ã
    short_years = ["00", "01", "25", "30", "50", "99"]
    
    for year_str in short_years:
        test_input = f"18:00 01.01.{year_str}"
        result, status, _ = validate_reminder_time_v2(test_input)
        if result:
            detected_year = result.year
            print(f"'{year_str}' -> {detected_year}")
    
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞' v2.0")
    print("=" * 70)
    
    try:
        test_new_date_formats()
        test_database_v2()
        test_formatting_functions()
        test_edge_cases()
        test_year_detection()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã v2.0 –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        print("  - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç")
        print("  - –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("  - –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")


if __name__ == "__main__":
    asyncio.run(main())
