"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞" (–≤–µ—Ä—Å–∏—è 2.0)
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
"""
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import MESSAGES
from database import db_v2
from utils import (
    validate_reminder_time_v2,
    format_datetime_for_user,
    format_time_for_user,
    format_datetime_short,
    get_time_until_reminder
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        callback_data="show_reminders"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        callback_data="help"
    ))
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()


def get_reminders_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    
    reminders = db_v2.get_user_reminders(user_id)
    
    if not reminders:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            callback_data="add_reminder_help"
        ))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for reminder_id, reminder_time, reminder_text in reminders:
            time_str = format_datetime_short(reminder_time)
            text_preview = reminder_text[:20] + "..." if reminder_text and len(reminder_text) > 20 else reminder_text
            
            button_text = f"üïê {time_str}"
            if text_preview:
                button_text += f" - {text_preview}"
            
            builder.add(InlineKeyboardButton(
                text=button_text,
                callback_data=f"reminder_{reminder_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ",
            callback_data="add_reminder_help"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="main_menu"
    ))
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()


def get_reminder_detail_keyboard(reminder_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_{reminder_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –ö —Å–ø–∏—Å–∫—É",
        callback_data="show_reminders"
    ))
    
    builder.adjust(1)
    return builder.as_markup()


def get_delete_confirmation_keyboard(reminder_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=f"confirm_delete_{reminder_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"reminder_{reminder_id}"
    ))
    
    builder.adjust(2)  # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ v2.0!\n\n"
            "‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç\n\n"
            "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ <code>18:00</code> - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "‚Ä¢ <code>18:00 12.06</code> - –±–µ–∑ –≥–æ–¥–∞\n"
            "‚Ä¢ <code>18:00 12.06.25</code> - –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥\n"
            "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
            "üåç –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)"
        )
        
        await message.answer(
            welcome_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ v2.0")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await show_help(message.from_user.id, message.answer)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")


@router.message(Command("list", "reminders"))
async def cmd_list_reminders(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –∏–ª–∏ /reminders"""
    try:
        await show_reminders_list(message.from_user.id, message.answer)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /list: {e}")


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        await callback.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback main_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "show_reminders")
async def callback_show_reminders(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        await show_reminders_list_new_message(callback.from_user.id, callback.message.answer)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback show_reminders: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    try:
        await show_help_new_message(callback.from_user.id, callback.message.answer)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback help: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "add_reminder_help")
async def callback_add_reminder_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        help_text = (
            "‚ûï –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>18:00</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 18:00\n"
            "‚Ä¢ <code>09:30 15.06</code> - 15 –∏—é–Ω—è –≤ 09:30\n"
            "‚Ä¢ <code>14:00 25.12.25</code> - 25 –¥–µ–∫–∞–±—Ä—è 2025 –≤ 14:00\n"
            "‚Ä¢ <code>20:30 01.01.2026</code> - 1 —è–Ω–≤–∞—Ä—è 2026 –≤ 20:30\n\n"
            "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º",
            callback_data="show_reminders"
        ))
        
        await callback.message.edit_text(
            help_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback add_reminder_help: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("reminder_"))
async def callback_reminder_detail(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        reminders = db_v2.get_user_reminders(user_id)
        reminder_info = None
        
        for r_id, r_time, r_text in reminders:
            if r_id == reminder_id:
                reminder_info = (r_id, r_time, r_text)
                break
        
        if not reminder_info:
            await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        _, reminder_time, reminder_text = reminder_info
        
        detail_text = (
            f"üïê <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id}</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {format_datetime_for_user(reminder_time)}\n"
            f"‚è∞ –í—Ä–µ–º—è: {format_time_for_user(reminder_time)}\n"
            f"‚è≥ {get_time_until_reminder(reminder_time)}\n"
        )
        
        if reminder_text:
            detail_text += f"\nüí¨ –¢–µ–∫—Å—Ç: {reminder_text}"
        
        await callback.message.edit_text(
            detail_text,
            reply_markup=get_reminder_detail_keyboard(reminder_id),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback reminder_detail: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete_reminder(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split("_")[1])
        
        await callback.message.edit_text(
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=get_delete_confirmation_keyboard(reminder_id)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback delete_reminder: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_delete_"))
async def callback_confirm_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        if db_v2.delete_reminder(reminder_id, user_id):
            await callback.message.edit_text(
                "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="show_reminders")
                ]])
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback confirm_delete: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message()
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        target_datetime, status, is_today_only = validate_reminder_time_v2(text)
        
        if status == "invalid_format":
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ <code>18:00</code> - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                "‚Ä¢ <code>18:00 12.06</code> - –±–µ–∑ –≥–æ–¥–∞\n"
                "‚Ä¢ <code>18:00 12.06.25</code> - –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥\n"
                "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            return
        
        if status == "past_time":
            await message.answer(
                "‚è∞ –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db_v2.add_reminder(user_id, target_datetime):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if is_today_only:
                response = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {format_time_for_user(target_datetime)}!"
            else:
                response = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {format_datetime_for_user(target_datetime)} –≤ {format_time_for_user(target_datetime)}!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            count = db_v2.get_reminders_count(user_id)
            response += f"\n\nüìä –£ –≤–∞—Å {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            
            await message.answer(response, reply_markup=get_main_keyboard())
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {target_datetime}")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        try:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")


async def show_reminders_list(user_id: int, edit_func):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reminders = db_v2.get_user_reminders(user_id)
    
    if not reminders:
        text = (
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>18:00 12.06</code>"
        )
    else:
        text = f"üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminders)}):\n\n"
        
        for i, (reminder_id, reminder_time, reminder_text) in enumerate(reminders, 1):
            time_str = format_datetime_short(reminder_time)
            until_str = get_time_until_reminder(reminder_time)
            
            text += f"{i}. üïê {time_str}\n"
            text += f"   ‚è≥ {until_str}\n"
            if reminder_text:
                text += f"   üí¨ {reminder_text}\n"
            text += "\n"
    
    await edit_func(
        text,
        reply_markup=get_reminders_keyboard(user_id),
        parse_mode="HTML"
    )


async def show_help(user_id: int, edit_func):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–µ v2.0</b>\n\n"
        "üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ <code>18:00</code> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>18:00 12.06</code> - 12 –∏—é–Ω—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.25</code> - 12 –∏—é–Ω—è 2025 –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–¥–∞\n"
        "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)\n\n"
        "üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    await edit_func(
        help_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def show_reminders_list_new_message(user_id: int, send_func):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    reminders = db_v2.get_user_reminders(user_id)

    if not reminders:
        text = (
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>18:00 12.06</code>"
        )
    else:
        text = f"üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminders)}):\n\n"

        for i, (reminder_id, reminder_time, reminder_text) in enumerate(reminders, 1):
            time_str = format_datetime_short(reminder_time)
            until_str = get_time_until_reminder(reminder_time)

            text += f"{i}. üïê {time_str}\n"
            text += f"   ‚è≥ {until_str}\n"
            if reminder_text:
                text += f"   üí¨ {reminder_text}\n"
            text += "\n"

    await send_func(
        text,
        reply_markup=get_reminders_keyboard(user_id),
        parse_mode="HTML"
    )


async def show_help_new_message(user_id: int, send_func):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–µ v2.0</b>\n\n"
        "üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ <code>18:00</code> - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>18:00 12.06</code> - 12 –∏—é–Ω—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.25</code> - 12 –∏—é–Ω—è 2025 –≥–æ–¥–∞\n"
        "‚Ä¢ <code>18:00 12.06.2025</code> - –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–¥–∞\n"
        "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –ø–æ –û–º—Å–∫—É (+6 UTC)\n\n"
        "üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))

    await send_func(
        help_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def send_reminder_to_user_v2(bot, user_id: int, reminder_datetime, reminder_text: str = None):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–µ—Ä—Å–∏—è 2.0)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reminder_datetime: –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    try:
        base_text = f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\nüìÖ {format_datetime_for_user(reminder_datetime)} –≤ {format_time_for_user(reminder_datetime)}"

        if reminder_text:
            base_text += f"\n\nüí¨ {reminder_text}"

        await bot.send_message(
            chat_id=user_id,
            text=base_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        raise
